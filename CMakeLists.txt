cmake_minimum_required(VERSION 3.12)
project(cc_project)

if(UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif()

set(CMAKE_CXX_STANDARD 17)
if (LINUX)
    message("[  OS  ] Building project on linux, additional flags are enabled")
    set(CMAKE_CXX_FLAGS "-Wall -Wreturn-type -Wno-unknown-pragmas")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -rdynamic -DYYDEBUG")
    set(CMAKE_CXX_FLAGS_TEST "-g -rdynamic -DYYDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "-O2")
else()
    message("[  OS  ] Building project not on linux, no additional flags")
    set(CMAKE_CXX_FLAGS "-Wall -Wno-unknown-pragmas")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -DYYDEBUG")
    set(CMAKE_CXX_FLAGS_TEST "-g -DYYDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "-O2")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "build/default")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "build/debug")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "build/release")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_TEST "build/test")
set(LLVM_DIR_FROM_ENV $ENV{LLVM_DIR})
if ("<var>${LLVM_DIR_FROM_ENV}" STREQUAL "<var>")
    message("[ LLVM ] LLVM_DIR directory will be found using system configuration")
else()
    set(LLVM_DIR ${LLVM_DIR_FROM_ENV})
    message("[ LLVM ] LLVM_DIR set to ${LLVM_DIR}")
endif()
file(GLOB_RECURSE TEST_RESOURCES_LIST "tests/res/**")

if (${CMAKE_BUILD_TYPE} STREQUAL Release)
    message("[BUILD ] Release type")
    add_compile_definitions(__BUILD_TYPE_RELEASE)
    add_compile_definitions(__COMPILER_FLAG_O2)
endif()
if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    message("[BUILD ] Debug type")
    add_compile_definitions(__BUILD_TYPE_DEBUG)
    add_compile_definitions(__COMPILER_FLAG_PG)
    add_compile_definitions(__COMPILER_FLAG_RDYNAMIC)
endif()
if (${CMAKE_BUILD_TYPE} STREQUAL Test)
    message("[BUILD ] Test type")
    add_compile_definitions(__BUILD_TYPE_TEST)
    add_compile_definitions(__COMPILER_FLAG_PG)
    add_compile_definitions(__COMPILER_FLAG_RDYNAMIC)
endif()

find_package(LLVM QUIET CONFIG)
message("[ LLVM ] Found LLVM ${LLVM_PACKAGE_VERSION}")
message("[ LLVM ] Using LLVMConfig.cmake in: ${LLVM_DIR}")
include_directories(${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})
llvm_map_components_to_libnames(LLVM_LIBS support core irreader bitwriter)

set(EXE_NAME i-lang)
file(GLOB_RECURSE SOURCE_FILES_LIST "src/**.cpp")
if (${CMAKE_BUILD_TYPE} STREQUAL Test)
    if (NOT LINUX)
        message("[TESTS ] Tracing allocator is disabled")
        list(FILTER SOURCE_FILES_LIST EXCLUDE REGEX "src/testing/TracingAllocator.cpp")
    else()
        message("[TESTS ] Tracing allocator is enabled")
    endif()
    #list(FILTER SOURCE_FILES_LIST EXCLUDE REGEX "src/Main.cpp")
else()
    list(FILTER SOURCE_FILES_LIST EXCLUDE REGEX "src/testing/[_a-zA-Z0-9]*.cpp")
endif()
add_executable(${EXE_NAME} ${SOURCE_FILES_LIST})
target_include_directories(${EXE_NAME} PRIVATE "src")
target_link_libraries(${EXE_NAME} stdc++)

# link test resources
file(COPY ${TEST_RESOURCES_LIST} DESTINATION "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG}/tests/res")
file(COPY ${TEST_RESOURCES_LIST} DESTINATION "${CMAKE_RUNTIME_OUTPUT_DIRECTORY_TEST}/tests/res")
set(TESTS_NAME i-lang-tests)
file(GLOB_RECURSE TEST_FILES_LIST "src/**.cpp" "tests/**.cpp")
add_executable(${TESTS_NAME} ${TEST_FILES_LIST})
target_include_directories(${TESTS_NAME} PRIVATE "src")
target_link_libraries(${TESTS_NAME} stdc++ ${LLVM_LIBS})
add_test(UnitTests ${TESTS_NAME})